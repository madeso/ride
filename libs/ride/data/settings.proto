package ride;

enum EdgeStyle {
  EDGESTYLE_NONE = 0;
  EDGESTYLE_LINE = 1;
  EDGESTYLE_BACKGROUND = 2;
}

enum ViewWhitespace {
  VIEWWHITESPACE_HIDDEN = 0;
  VIEWWHITESPACE_ALWAYS = 1;
  VIEWWHITESPACE_AFTER_IDENT = 2;
}

enum WrapMode {
  WRAPMODE_NONE = 0;
  WRAPMODE_CHAR = 1;
  WRAPMODE_WORD = 2;
}

enum AutoIndentation {
	AUTOINDENTATION_NONE = 0;
	AUTOINDENTATION_KEEP = 1;
	AUTOINDENTATION_SMART = 2;
}

enum IndicatorStyle {
  INDICATORSTYLE_PLAIN = 0;
  INDICATORSTYLE_SQUIGGLE = 1;
  INDICATORSTYLE_TT = 2;
  INDICATORSTYLE_DIAGONAL = 3;
  INDICATORSTYLE_STRIKE = 4;
  INDICATORSTYLE_HIDDEN = 5;
  INDICATORSTYLE_BOX = 6;
  INDICATORSTYLE_ROUNDBOX = 7;
  INDICATORSTYLE_STRAIGHTBOX = 8;
  INDICATORSTYLE_DASH = 9;
  INDICATORSTYLE_DOTS = 10;
  INDICATORSTYLE_SQUIGGLELOW = 11;
  INDICATORSTYLE_DOTBOX = 12;
}

enum VirtualSpace {
	VIRTUALSPACE_NONE = 0;
	VIRTUALSPACE_RECTANGULARSELECTION = 1;
	VIRTUALSPACE_USERACCESSIBLE = 2;
}

enum WrapVisualFlagsLocation {
	WRAPVISUALFLAGLOC_DEFAULT = 0; // Visual flags drawn near border
	WRAPVISUALFLAGLOC_END_BY_TEXT = 1; // Visual flag at end of subline drawn near text
	WRAPVISUALFLAGLOC_START_BY_TEXT = 2; // Visual flag at beginning of subline drawn near text
}

enum WrapIndentMode {
	WRAPINDENT_FIXED 	= 0; // Wrapped sublines aligned to left of window plus amount set by wrap_start_indent
	WRAPINDENT_SAME 	= 1; // Wrapped sublines are aligned to first subline indent
	WRAPINDENT_INDENT 	= 2; // Wrapped sublines are aligned to first subline indent plus one more level of indentation
}

enum Annotation {
	ANNOTATION_HIDDEN =	0; // 	Annotations are not displayed.
	ANNOTATION_STANDARD = 1; // 	Annotations are drawn left justified with no adornment.
	ANNOTATION_BOXED =	2; // 	Annotations are indented to match the text and are surrounded by a box.
}

message Indicator {
	optional Color foreground = 2;
	optional bool under = 3 [default=true];
	optional int32 alpha = 4 [default=255];
	optional int32 outline_alpha = 5 [default=255];
}

message FoldFlags {
  optional bool LINEBEFORE_EXPANDED = 1;
  optional bool LINEBEFORE_CONTRACTED = 2;
  optional bool LINEAFTER_EXPANDED = 3;
  optional bool LINEAFTER_CONTRACTED = 4;
  optional bool LEVELNUMBERS = 5;
};

message Color {
	optional int32 r = 1;
	optional int32 g = 2;
	optional int32 b = 3;
}

enum MarkerSymbol {
	MARKERSYMBOL_CIRCLE = 0;
	MARKERSYMBOL_ROUNDRECT = 1;
	MARKERSYMBOL_ARROW = 2;
	MARKERSYMBOL_SMALLRECT = 3;
	MARKERSYMBOL_SHORTARROW = 4;
	MARKERSYMBOL_EMPTY = 5;
	MARKERSYMBOL_ARROWDOWN = 6;
	MARKERSYMBOL_MINUS = 7;
	MARKERSYMBOL_PLUS = 8;
}

enum CaretStyle {
	CARETSTYLE_INVISIBLE = 0;
	CARETSTYLE_LINE = 1;
	CARETSTYLE_BLOCK = 2;
}

enum CaretSticky {
	CARETSTICKY_OFF = 0;
	CARETSTICKY_WHITESPACE = 1;
	CARETSTICKY_ON = 2;
}

enum StatusbarStyle {
	STATUSBAR_STYLE_NONE = 0;
	STATUSBAR_STYLE_BAR = 1;
	STATUSBAR_STYLE_RAISED = 2;
	STATUSBAR_STYLE_SUNKEN = 3;
}

message Style {
  optional bool use_typeface = 1 [default=false];
  optional string typeface = 2;

  optional bool use_bold = 3 [default=false];
  optional bool bold = 4 [default=false];

  optional bool use_italic = 5 [default=false];
  optional bool italic = 6 [default=false];

  optional bool use_underline = 7 [default=false];
  optional bool underline = 8 [default=false];

  optional bool use_font_size = 9 [default=false];
  optional int32 font_size = 10 [default=10];

  optional bool use_foreground = 11 [default=false];
  optional Color foreground = 12;

  optional bool use_background = 13 [default=false];
  optional Color background = 14;
};

// the idea of moving out all fonts and colors is that likely theese are
// what people want share: obsidian/zenburn/monokai and https://studiostyl.es/
message FontsAndColors {
  optional Color selected_line = 1;
  optional Color fold_margin_hi = 2;
  optional Color fold_margin_low = 3;

  optional bool use_selection_foreground = 4;
  optional Color selection_foreground = 5;
  optional bool use_selection_background = 6;
  optional Color selection_background = 7;

  optional Color edgeColor = 8;

  // indicators
  optional Indicator indicator_error = 10;
  optional Indicator indicator_warning = 11;
  optional Indicator indicator_search_highlight = 12;
  optional Indicator indicator_select_highlight = 13;

  optional Style line_number_style = 28;
  optional Style default_style = 29;
  optional Style bracelight_style = 30;
  optional Style bracebad_style = 31;
  optional Style controlchar_style = 32;
  optional Style indentguide_style = 33;
  optional Style calltip_style = 34;
  optional Style annotation_warning_style = 35;
  optional Style annotation_error_style = 36;

  optional Color folderend_foreground = 37;
  optional Color folderopenmid_foreground = 38;
  optional Color foldermidtail_foreground = 39;
  optional Color foldertail_foreground = 40;
  optional Color foldersub_foreground = 41;
  optional Color folder_foreground = 42;
  optional Color folderopen_foreground = 43;

  optional Color folderend_background = 44;
  optional Color folderopenmid_background = 45;
  optional Color foldermidtail_background = 46;
  optional Color foldertail_background = 47;
  optional Color foldersub_background = 48;
  optional Color folder_background = 49;
  optional Color folderopen_background = 50;

  optional Color caret_foreground = 51;

  // common styles
  optional Style style_comment = 101;
  optional Style style_commentline = 102;
  optional Style style_commentdoc = 103;
  optional Style style_number = 104;
  optional Style style_keyword = 105;
  optional Style style_string = 106;
  optional Style style_character = 107;
  optional Style style_uuid = 108;
  optional Style style_preprocessor = 109;
  optional Style style_operator = 110;
  optional Style style_identifier = 111;
  optional Style style_string_eol = 112;
  optional Style style_verbatim = 113;
  optional Style style_regex = 114;
  optional Style style_commentlinedoc = 115;
  optional Style style_keyword_types = 116;
  optional Style style_commentdockeyword = 117;
  optional Style style_commentdockeyworderror = 118;
  optional Style style_globalclass = 119;
  optional Style style_stringraw = 120;
  optional Style style_tripleverbatim = 121;
  optional Style style_hashquotedstring = 122;
  optional Style style_preprocessorcomment = 123;

  optional Style markdown_line_begin = 201;
  optional Style markdown_strong1 = 202;
  optional Style markdown_strong2 = 203;
  optional Style markdown_em1 = 204;
  optional Style markdown_em2 = 205;
  optional Style markdown_header1 = 206;
  optional Style markdown_header2 = 207;
  optional Style markdown_header3 = 208;
  optional Style markdown_header4 = 209;
  optional Style markdown_header5 = 210;
  optional Style markdown_header6 = 211;
  optional Style markdown_prechar = 212;
  optional Style markdown_ulist_item = 213;
  optional Style markdown_olist_item = 214;
  optional Style markdown_blockquote = 215;
  optional Style markdown_strikeout = 216;
  optional Style markdown_hrule = 217;
  optional Style markdown_link = 218;
  optional Style markdown_code = 219;
  optional Style markdown_code2 = 220;
  optional Style markdown_codebk = 221;
  
  optional Style props_section = 302;
  optional Style props_assignment = 303;
  optional Style props_defval = 304;
  optional Style props_key = 305;
  
  optional Style h_tag = 401;
  optional Style h_tagunknown = 402;
  optional Style h_attribute = 403;
  optional Style h_attributeunknown = 404;
  optional Style h_number = 405;
  optional Style h_doublestring = 406;
  optional Style h_singlestring = 407;
  optional Style h_other = 408;
  optional Style h_entity = 410;
  optional Style h_tagend = 411;
  optional Style h_xmlstart = 412;
  optional Style h_xmlend = 413;
  optional Style h_script = 414;
  optional Style h_asp = 415;
  optional Style h_aspat = 416;
  optional Style h_cdata = 417;
  optional Style h_question = 418;
  optional Style h_value = 419;
  optional Style h_xccomment = 420;
  
  optional Style cmake_stringdq = 502;
  optional Style cmake_stringlq = 503;
  optional Style cmake_stringrq = 504;
  optional Style cmake_commands = 505;
  optional Style cmake_parameters = 506;
  optional Style cmake_variable = 507;
  optional Style cmake_userdefined = 508;
  optional Style cmake_whiledef = 509;
  optional Style cmake_foreachdef = 510;
  optional Style cmake_ifdefinedef = 511;
  optional Style cmake_macrodef = 512;
  optional Style cmake_stringvar = 513;
  optional Style cmake_number = 514;

  optional Style lua_label = 620;
  
  optional Style yaml_number = 704;
  optional Style yaml_reference = 705;
  optional Style yaml_document = 706;
  optional Style yaml_text = 707;
  optional Style yaml_error = 708;

  optional Style rust_lifetime = 800;
  optional Style rust_lex_error = 801;

  optional Color dock_background			    = 1000;
  optional Color dock_sash					    = 1001;
  optional Color dock_active_caption		    = 1002;
  optional Color dock_active_caption_gradient   = 1003;
  optional Color dock_inactive_caption		    = 1004;
  optional Color dock_inactive_caption_gradient = 1005;
  optional Color dock_active_caption_text	    = 1006;
  optional Color dock_inactive_caption_text	    = 1007;
  optional Color dock_border				    = 1008;
  optional Color dock_gripper				    = 1009;

  optional Color tab_background				    = 1010;
  optional Color tab_border				        = 1011;
  optional Color tab_sash				        = 1012;
  optional Color tab_active_tab				    = 1013;
  optional Color tab_inactive_tab			    = 1014;
  optional Color tab_active_border			    = 1015;
  optional Color tab_inactive_border		    = 1016;
  optional Color tab_active_text			    = 1017;
  optional Color tab_inactive_text			    = 1018;
  
  optional StatusbarStyle statusbar_style	    = 1019 [ default=STATUSBAR_STYLE_BAR ] ;
  optional Color statusbar_shadow		        = 1020;
  optional Color statusbar_highlight	        = 1021;
  optional Color statusbar_foreground		    = 1022;
  optional Color statusbar_background		    = 1023;

  optional Color switcher_background_color = 1304;
  optional Color switcher_text_color = 1305;
  optional Color switcher_selection_color = 1306;
  optional Color switcher_selection_outline_color = 1307;
  optional Color switcher_dialog_color = 1316;
  optional Color switcher_base_color = 1317;
}

message Theme {
	optional string name = 1;
	// optional string author = 2;
	// optional string description = 3;
	optional bool can_remove = 4 [default=true];

	optional FontsAndColors data = 10;
}

message WrapVisualFlags {
	optional bool end = 1 [default=false]; // Visual flag at end of subline of a wrapped line.
	optional bool start = 2 [default=false]; // Visual flag at begin of subline of a wrapped line. Subline is indented by at least 1 to make room for the flag.
	optional bool margin = 3 [default=false]; // Visual flag in line number margin.
}

enum AutoComplete {
	AUTOCOMPLETE_NONE = 0;
	AUTOCOMPLETE_PARA = 1;
}

enum HomeEndStyle {
	HES_BASIC = 1;
	HES_DISPLAY = 2;
	HES_WRAP = 3;
	HES_VCBASIC = 4;
	HES_VCDISPLAY = 5;
	HES_VCWRAP = 6;
	HES_SCROLL = 7;
}

message Settings {
  optional bool lineNumberEnable = 1 [default=true];
  optional bool foldEnable = 2 [default=true];
  optional bool displayEOLEnable = 3;
  optional bool indentGuideEnable = 4 [default=true];
  optional ViewWhitespace whitespace = 5;
  optional WrapMode wordWrap = 6;

  optional EdgeStyle edgeStyle = 7 [default=EDGESTYLE_LINE];
  
  optional FontsAndColors fonts_and_colors = 8;

  optional int32 edgeColumn = 9 [default=80];

  optional int32 tabWidth = 10 [default=4];
  optional bool useTabs = 11 [default=false];
  optional bool tabIndents = 12 [default=true];
  optional bool backspaceUnindents = 13 [default=true];

  optional FoldFlags foldflags = 14;
  optional VirtualSpace virtual_space = 15 [default=VIRTUALSPACE_NONE];
  optional bool end_at_last_line = 16 [default=false];
  optional bool vertical_scrollbar = 17 [default=true] ;
  optional bool horizontal_scrollbar = 18 [default=true];

  optional WrapVisualFlags wrap_visual_flags = 19;
  optional WrapVisualFlagsLocation wrap_visual_flags_location = 20;
  optional WrapIndentMode wrap_indent_mode = 21;
  optional int32 wrap_start_indent = 22;
  optional Annotation annotations = 23 [default = ANNOTATION_BOXED];

  optional bool current_line_visible = 24 [default=false];
  optional int32 current_line_alpha = 25 [default=10];
  optional bool current_line_overdraw = 26 [default=false];

  optional bool highlight_word_also_highlight_keywords = 27 [default=false];

  optional AutoIndentation auto_indentation = 28 [default=AUTOINDENTATION_SMART] ;

  optional MarkerSymbol folderend = 29 [default=MARKERSYMBOL_EMPTY];
  optional MarkerSymbol folderopenmid = 30 [default=MARKERSYMBOL_EMPTY];
  optional MarkerSymbol foldermidtail = 31 [default=MARKERSYMBOL_EMPTY];
  optional MarkerSymbol foldertail = 32 [default=MARKERSYMBOL_EMPTY];
  optional MarkerSymbol foldersub = 33 [default=MARKERSYMBOL_EMPTY];
  optional MarkerSymbol folder = 34 [default=MARKERSYMBOL_EMPTY];
  optional MarkerSymbol folderopen = 35 [default=MARKERSYMBOL_EMPTY];

  optional AutoComplete autocomplete_curly_braces = 401 [default=AUTOCOMPLETE_PARA];
  optional AutoComplete autocomplete_parentheses = 402 [default=AUTOCOMPLETE_PARA];
  optional AutoComplete autocomplete_brackets = 403 [default=AUTOCOMPLETE_PARA];
  optional AutoComplete autocomplete_doublequote = 404 [default=AUTOCOMPLETE_PARA];
  optional AutoComplete autocomplete_singlequote = 405 [default=AUTOCOMPLETE_PARA];

  optional bool show_multiline_indicators = 39 [default=false];

  optional bool show_compiler_messages_as_annotations = 40 [default=true];

  repeated Theme themes = 41;

  optional int32 caret_period = 42 [default=500];
  optional int32 caret_width = 43 [default=1];
  optional CaretSticky caret_sticky = 44 [default=CARETSTICKY_ON];
  optional CaretStyle caret_style = 45 [default=CARETSTYLE_LINE];

  optional HomeEndStyle home_end_style = 46 [default=HES_VCWRAP];

  // indicators
  optional IndicatorStyle indicator_error = 100 [default=INDICATORSTYLE_SQUIGGLE];
  optional IndicatorStyle indicator_warning = 101 [default=INDICATORSTYLE_SQUIGGLE];
  optional IndicatorStyle indicator_search_highlight = 102 [default=INDICATORSTYLE_SQUIGGLE];
  optional IndicatorStyle indicator_select_highlight = 103 [default=INDICATORSTYLE_SQUIGGLE];

  // settings for c++
  optional bool foldComment = 200 [default=true];
  optional bool foldCompact = 201 [default=true];
  optional bool foldPreproc = 202 [default=true];
  optional bool     styling_within_preprocessor = 203 [default=false];     //  For C++ code determines whether all preprocessor code is styled in the preprocessor style (0, the default) or only from the initial # to the end of the command word(1).
  optional bool     lexer_cpp_allow_dollars = 204 [default=false];         // Set to 0 to disallow the '$' character in identifiers with the cpp lexer.
  optional bool     lexer_cpp_track_preprocessor = 205 [default=false];    //  Set to 1 to interpret #if/#else/#endif to grey out code that is not active.
  optional bool     lexer_cpp_update_preprocessor = 206 [default=false];   //  Set to 1 to update preprocessor definitions when #define found.
  optional bool     lexer_cpp_triplequoted_strings = 207 [default=false];  //  Set to 1 to enable highlighting of triple-quoted strings.
  optional bool     lexer_cpp_hashquoted_strings = 208 [default=false];    //  Set to 1 to enable highlighting of hash-quoted strings.
  optional bool     fold_cpp_syntax_based = 209 [default=true];           //  Set this property to 0 to disable syntax based folding.
  optional bool     fold_cpp_comment_multiline = 210 [default=true];      //  Set this property to 0 to disable folding multi-line comments when fold.comment=1.
  optional bool     fold_cpp_comment_explicit = 211 [default=true];       //  Set this property to 0 to disable folding explicit fold points when fold.comment=1.
  optional bool     fold_cpp_explicit_anywhere = 212 [default=false];      //  Set this property to 1 to enable explicit fold points anywhere, not just in line comments.
  optional bool     fold_at_else = 213 [default=true];                    //  This option enables C++ folding on a "} else {" line of an if statement.

  // settings for ctrl-tab

  optional bool switcher_vs_focus = 300 [default=true];
  optional int32 switcher_row_count = 301 [default = 12];

  optional int32 switcher_text_margin_x = 302 [default = 4];
  optional int32 switcher_text_margin_y = 303 [default = 2];
  optional int32 switcher_x_margin = 308 [default = 3];
  optional int32 switcher_y_margin = 309 [default = 3];
  optional int32 switcher_row_spacing = 310 [default = 1];
  optional int32 switcher_col_spacing = 311 [default = 1];
  optional int32 switcher_item_maxwidth = 312 [default = 300];
  optional int32 switcher_item_maxheight = 313 [default = 40];
  optional int32 switcher_dlg_main_border = 314 [default = 8];
  optional int32 switcher_dlg_item_border = 315 [default = 3];

  optional int32 switcher_min_width = 316 [default = 1];
  optional int32 switcher_min_height = 317 [default = 1];
}

/* ******************************************************************************************* */

message OpenFile {
  optional string path = 1;

  optional int32 start_line = 2 [default=-1];
  optional int32 start_index = 3 [default=-1];
  optional int32 end_line = 4 [default=-1];
  optional int32 end_index = 5 [default=-1];
}

enum WindowState {
  WINDOWSTATE_NORMAL = 0;
  WINDOWSTATE_ICONIZED = 1;
  WINDOWSTATE_MAXIMIZED = 2;
  WINDOWSTATE_FULLSCREEN = 3;
}

message Session {
  optional int32 window_x = 1;
  optional int32 window_y = 2;
  optional int32 window_width = 3;
  optional int32 window_height = 4;
  optional WindowState state = 5 [default=WINDOWSTATE_NORMAL];

  repeated OpenFile files = 6;
  optional string project = 7;
  optional string aui_perspective = 8;
}

/* ******************************************************************************************* */

enum FindDlgTarget {
	FDT_NORMAL_TEXT = 0;
	FDT_NORMAL_REGEX = 1;
	FDT_NORMAL_POSIX = 2;
}

message FindDlg {
  optional bool sub_folders = 1 [default=true];
  optional bool match_case = 2 [default=true];
  optional bool match_whole_word = 3 [default=false];
  optional bool match_start = 4 [default=false];
  optional FindDlgTarget target = 5 [default=FDT_NORMAL_TEXT];
  optional string file_types = 6 [default="*.rs;*.toml"];
}

message DialogData {
	optional FindDlg find_dlg = 1;
}

/* ******************************************************************************************* */

message BuildSetting {
	optional string name = 1 [default="<untitled build setting>"];
	optional bool release = 2 [default=false];
	repeated string features = 3;
	optional bool default_features = 4 [default=true];
	optional string target = 5 [default=""];
	optional bool verbose = 6 [default=false];

	optional string custom_arguments = 100 [default=""];
}

message Project {
  optional int32 tabWidth = 1 [default=4];
  optional bool useTabs = 2 [default=false];

  repeated BuildSetting build_settings = 3;
}

/* ******************************************************************************************* */

message RunSetting {
	optional string name = 1 [default="Run"];

	optional string application = 2 [default="%built_application%"];
	optional string arguments = 3 [default=""];
	optional string folder = 4 [default="%cargo_folder%"];
	optional string cmd_before_launch = 5 [default=""];
	optional bool wait_for_exit = 6 [default=false];
}

message UserProject {
	optional int32 build_setting = 1 [default=-1];
	optional int32 run_setting = 2 [default=-1];
	repeated RunSetting run = 3;
}


/* ****************************************************************************************** */

message MachineSettings {
	optional string cargo = 1 [default="cargo"];
	optional string rustc = 2 [default="rustc"];
	optional string protoc = 3 [default="protoc"];
	optional string racer = 4 [default="racer"];
	optional string rust_src_path = 5 [default=""];
}
